@inject HttpClient _client

<EditForm Model="@Car" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled = "@Disabled">
        <div class="form-group">
            <label>Manufacturer: </label>
            <div>
                <InputSelect @bind-Value="Car.MakeId" class="form-control">
                    <option value="">-- Select Manufacturer --</option>
                    @if (Manufacturers != null)
                    {
                        foreach (var manu in Manufacturers)
                        {
                            <option value="@manu.Id">@manu.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Car.MakeId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Model: </label>
            <div>
                <InputSelect @bind-Value="Car.ModelId" class="form-control">
                    <option value="">-- Select Model --</option>
                    @if (Models != null)
                    {
                        foreach (var model in Models)
                        {
                            <option value="@model.Id">@model.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Car.ModelId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Colour: </label>
            <div>
                <InputSelect @bind-Value="Car.ColourId" class="form-control">
                    <option value="">-- Select Colour --</option>
                    @if (Colours != null)
                    {
                        foreach (var colour in Colours)
                        {
                            <option value="@colour.Id">@colour.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Car.ColourId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Year: </label>
            <div>
                <InputNumber @bind-Value="@Car.Year" class="form-control" />
                <ValidationMessage For="@(() => Car.Year)" />
            </div>
        </div>

        <div class="form-group">
            <label>License Plate Number: </label>
            <div>
                <InputText @bind-Value="@Car.LicensePlateNumber" class="form-control" />
                <ValidationMessage For="@(() => Car.LicensePlateNumber)" />
            </div>
        </div>

        <div class="form-group">
            <label>Daily Rate: </label>
            <div>
                <InputNumber @bind-Value="@Car.RentalRate" class="form-control" />
                <ValidationMessage For="@(() => Car.RentalRate)" />
            </div>
        </div>

        <br />
        <br />
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="cars" />

</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Car Car { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Manufacturer>? Manufacturers;
    private IList<Model>? Models;
    private IList<Colour>? Colours;

    protected async override Task OnInitializedAsync()
    {
        Manufacturers = await _client.GetFromJsonAsync<List<Manufacturer>>($"{Endpoints.MakesEndpoint}");
        Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
        Colours = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");
    }
}