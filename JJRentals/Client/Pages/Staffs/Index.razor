@page "/staffs/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car Staffs</h3>
<br />

<a href="/staffs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Staff
</a>
<br />
<br />

@if (Staffs == null)
{
    <div class="alert alert-info">Loading staffs...</div>
}
else if (!Staffs.Any())
{
    <div class="alert alert-info">No staffs found.</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Hire Date</th>
                <th>Contact Number</th>
                <th>Email Address</th>
                <th>Address</th>
                <th>Outlet</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var staff in Staffs)
            {
                <tr>
                    <td>@staff.Name</td>
                    <td>@staff.Position</td>
                    <td>@staff.HireDate.ToString("dd MMM yyyy")</td>
                    <td>@staff.ContactNo</td>
                    <td>@staff.Email</td>
                    <td>@staff.Address</td>
                    <td>@(staff.Outlet?.Name ?? "N/A")</td> <!-- Handle null outlet -->
                    <td>
                        <a href="/staffs/view/@staff.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/staffs/edit/@staff.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=> Delete(staff.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Staff>? Staffs;

    protected override async Task OnInitializedAsync()
    {
        await LoadStaffsAsync();
    }

    private async Task LoadStaffsAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

    private async Task Delete(int staffId)
    {
        if (Staffs != null)
        {
            var staff = Staffs.FirstOrDefault(q => q.Id == staffId);
            if (staff == null) return;

            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {staff.Name} ({staff.Position})?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
                await LoadStaffsAsync(); // Refresh the list after deletion
            }
        }
    }
}
