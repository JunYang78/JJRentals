@inject HttpClient _client
<EditForm Model="@staff" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Outlets: </label>
            <div>
                <InputSelect @bind-Value="staff.OutletId" class="form-control">
                    <option value="">-- Select Outlet --</option>
                    @if (Outlets != null)
                    {
                        foreach (var outlet in Outlets)
                        {
                            <!-- Make sure the value is a string that can be converted to the type of staff.OutletId -->
                            <option value="@outlet.Id">@outlet.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => staff.OutletId)" />
            </div>
        </div>



        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="@staff.Name" class="form-control" />
                <ValidationMessage For="@(() => staff.Name)" />
            </div>
        </div>

        <div class="form-group">
            <label>Password: </label>
            <div>
                <InputText @bind-Value="@staff.Password" class="form-control" />
                <ValidationMessage For="@(() => staff.Password)" />
            </div>
        </div>

        <div class="form-group">
            <label>Address: </label>
            <div>
                <InputText @bind-Value="@staff.Address" class="form-control" />
                <ValidationMessage For="@(() => staff.Address)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date of Birth: </label>
            <div>
                <InputDate @bind-Value="@staff.DateOfBirth" class="form-control" />
                <ValidationMessage For="@(() => staff.DateOfBirth)" />
            </div>
        </div>

        <div class="form-group">
            <label>Email: </label>
            <div>
                <InputText @bind-Value="@staff.Email" class="form-control" />
                <ValidationMessage For="@(() => staff.Email)" />
            </div>
        </div>


        <div class="form-group">
            <label>Contact No: </label>
            <div>
                <InputText @bind-Value="@staff.ContactNo" class="form-control" />
                <ValidationMessage For="@(() => staff.ContactNo)" />
            </div>
        </div>

        <div class="form-group">
            <label>Hire Date: </label>
            <div>
                <InputDate @bind-Value="@staff.HireDate" class="form-control" />
                <ValidationMessage For="@(() => staff.HireDate)" />
            </div>
        </div>

        <div class="form-group">
            <label>Position: </label>
            <div>
                <InputText @bind-Value="@staff.Position" class="form-control" />
                <ValidationMessage For="@(() => staff.Position)" />
            </div>
        </div>



        <br />
        <br />
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="staffs" />

</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Staff staff { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Outlet>? Outlets;


    protected async override Task OnInitializedAsync()
    {
        Outlets = await _client.GetFromJsonAsync<List<Outlet>>($"{Endpoints.OutletsEndpoint}");

    }
}