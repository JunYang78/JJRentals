@page "/payments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Booking Payments</h3>
<br />

@if (Payments == null)
{
    <div class="alert alert-info">Loading Payments...</div>
}
else
{
    <table class="table table-responsive" id="paymentsTable">
        <thead>
            <tr>
                <th>Booking Id</th>
                <th>Amount</th>
                <th>Payment Date</th>
                <th>Payment Method</th>
                <th>Payment Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payment in Payments)
            {
                <tr>
                    <td>@payment.Booking.Id</td>
                    <td>@("$" + payment.Amount)</td>
                    <td>@payment.DateCreated.Date.ToString("dd MMM yyyy")</td>
                    <td>@payment.PaymentMethod</td>
                    <td>@payment.PaymentStatus</td>
                    <td>
                        <a href="/payments/edit/@payment.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span> Edit
                        </a>
                    </td>


                </tr>
            }
        </tbody>
    </table>
}

<a href="bookings" class="btn btn-secondary">
    Back
</a>


@code {
    private List<Payment>? Payments;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        try
        {
            Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
        }
        catch
        {
            Dispose();
        }
    }

    async Task Delete(int paymentId)
    {
        if (Payments != null)
        {
            var payment = Payments.First(q => q.Id == paymentId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment.Id}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.PaymentsEndpoint}/{paymentId}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}