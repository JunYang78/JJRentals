@inject HttpClient _client

<EditForm Model="@payment" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">


            <label>Booking: </label>
            <div>
                <InputSelect @bind-Value="payment.BookingID" class="form-control">
                    <option value="">-- Select Booking --</option>
                    @if (Bookings != null)
                    {
                        foreach (var Booking in Bookings)
                        {
                            <option value="@Booking.Id">@Booking.Id</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => payment.BookingID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Amount: </label>
            <div>
                <InputNumber @bind-Value="@payment.Amount" class="form-control" />
                <ValidationMessage For="@(() => payment.Amount)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date & Time: </label>
            <div>
                <InputDate @bind-Value="@payment.PaymentDate" class="form-control" />
                <ValidationMessage For="@(() => payment.PaymentDate)" />
            </div>
        </div>

        <div class="form-group">
            <label>Payment Method: </label>
            <div>
                <InputSelect @bind-Value="@payment.PaymentMethod" class="form-control">
                    <option value="">-- Select Payment method --</option>
                    <option value="Cash">Cash</option>
                    <option value="Credit Card">Credit Card</option>
                    <option value="Bank Transfer">Bank Transfer</option>
                </InputSelect>
                <ValidationMessage For="@(() => payment.PaymentMethod)" />
            </div>
        </div>

        <div class="form-group">
            <label>Payment Status: </label>
            <div>
                <InputText @bind-Value="@payment.PaymentStatus" class="form-control" />
                <ValidationMessage For="@(() => payment.PaymentStatus)" />
            </div>
        </div>

        <br />
        <br />
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="bookings" />

</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Payment payment { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Booking>? Bookings;

    protected async override Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
    }
}


