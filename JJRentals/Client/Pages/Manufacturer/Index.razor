@page "/manufacturers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Car Manufacturers</h3>

<input type="text" @bind="searchTerm" placeholder="Search by name" class="form-control mb-3" />

<a href="/manufacturers/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Manufacturers
</a>
<br />
<br />

@if (Manufacturers == null)
{
    <div class="alert alert-info">Loading Manufacturers...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>ContactNo</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var manu in Manufacturers.Where(m => string.IsNullOrEmpty(searchTerm) || m.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            {
                <tr>
                    <td>@manu.Name</td>
                    <td>@manu.ContactNo</td>
                    <td>@manu.Email</td>

                    <td>
                        <a href="/manufacturers/view/@manu.Id" class="btn btn-primary">
                            <span class="oi oi-eye"></span>
                        </a>
                        <a href="/manufacturers/edit/@manu.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(manu.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Manufacturer>? Manufacturers;
    private string searchTerm;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        try
        {
            Manufacturers = await _client.GetFromJsonAsync<List<Manufacturer>>($"{Endpoints.ManufacturersEndpoint}");
        }
        catch
        {
            Dispose();
        }
    }

    async Task Delete(int makeId)
    {
        if (Manufacturers != null)
        {
            var manu = Manufacturers.First(q => q.Id == makeId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {manu.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ManufacturersEndpoint}/{makeId}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}