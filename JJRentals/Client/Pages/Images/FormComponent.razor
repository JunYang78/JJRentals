@inject HttpClient _client

<EditForm Model="@image" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Carplate: </label>
            <div>
                <InputSelect @bind-Value="image.CarId" class="form-control">
                    <option value="">-- Select Carplate No. --</option>
                    @if (Cars != null)
                    {
                        foreach (var car in Cars)
                        {
                            <option value="@car.Id">@car.CarPlate</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => image.CarId)" />
            </div>
        </div>

        <div class="form-group">
            <label for="imgFileUrl">Image File URL: </label>
            <div>
                <InputText @bind-Value="@image.ImgFileURL" class="form-control" id="imgFileUrl" />
                <ValidationMessage For="@(() => image.ImgFileURL)" />
            </div>
        </div>

      
        <br />
        <br />
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="images" />

</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Image image { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Car>? Cars;

    protected async override Task OnInitializedAsync()
    {
        Cars = await _client.GetFromJsonAsync<List<Car>>($"{Endpoints.CarsEndpoint}");
    }
}