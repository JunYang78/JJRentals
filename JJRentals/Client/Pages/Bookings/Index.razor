@page "/bookings/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpInterceptorService _interceptor
@implements IDisposable

@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings...</div>
}
else
{
<AuthorizeView Roles="Administrator, User">
    <Authorized>
        <h3 class="card-title">Bookings</h3>

        <input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Search by Car Plate" class="form-control mb-3" />

        <a href="/bookings/create" class="btn btn-secondary">
            <span class="oi oi-plus"></span>
            Create New Booking
        </a>
        <br />
        <br />

            <a href="payments" class="btn btn-secondary">
                Booking Payments
            </a>
            <br />
            <br />

        <table class="table table-responsive" id="bookingsTable">
            <thead>
                <tr>
                    <th>Booking Id</th>
                    <th>RentalStartDate</th>
                    <th>RentalEndDate</th>
                    <th>Duration</th>
                    <th>Pickup Option</th>
                    <th>Location</th>
                    <th>Staff</th>
                    <th>Customer</th>
                    <th>Car</th>
                    <th>Payment Info</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in Bookings.Where(b => string.IsNullOrEmpty(searchTerm) || b.Car.CarPlate.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                {
                    <tr>
                        <td>@booking.Id</td>
                        <td>@booking.RentalStartDate.ToString("dd MMM yyyy")</td>
                        <td>@booking.RentalEndDate.ToString("dd MMM yyyy")</td>
                        <td>
                            @if (booking.RentalStartDate != null && booking.RentalEndDate != null)
                            {
                                var totalDays = (booking.RentalEndDate - booking.RentalStartDate).TotalDays;
                                @(totalDays.ToString("0") + " Days")
                            }
                            else
                            {
                                @:To Be Determined
                            }
                        </td>
                        <td>@booking.PickUpOption</td>
                        <td>@booking.Location</td>
                        <td>@booking.Staff.Name</td>
                        <td>@booking.Customer.Name</td>
                        <td>@booking.Car.CarPlate</td>

                        <td>
                            <a href="/payments/edit/@booking.Id" class="btn btn-primary">
                                <span class="oi oi-dollar"></span> Payment
                            </a>
                        </td>

                        <td>
                            <a href="/bookings/view/@booking.Id" class="btn btn-primary">
                                <span class="oi oi-eye"></span>
                            </a>
                            <a href="/bookings/edit/@booking.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(booking.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
            <h3 class="card-title">Your Bookings</h3>
            <br />

            <table class="table table-responsive" id="bookingsTable">
                <thead>
                    <tr>
                        <th>Booking Id</th>
                        <th>RentalStartDate</th>
                        <th>RentalEndDate</th>
                        <th>Duration</th>
                        <th>Pickup Option</th>
                        <th>Location</th>
                        <th>Car</th>
                        <th>Payment Info</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in Bookings.Where(b => b.Customer.Email == CurrentUserName))
                    {
                        <tr>
                            <td>@booking.Id</td>
                            <td>@booking.RentalStartDate.ToString("dd MMM yyyy")</td>
                            <td>@booking.RentalEndDate.ToString("dd MMM yyyy")</td>
                            <td>
                                @if (booking.RentalStartDate != null && booking.RentalEndDate != null)
                                {
                                    var totalDays = (booking.RentalEndDate - booking.RentalStartDate).TotalDays;
                                    @(totalDays.ToString("0") + " Days")
                                }
                                else
                                {
                                    @:To Be Determined
                                }
                            </td>
                            <td>@booking.PickUpOption</td>
                            <td>@booking.Location</td>
                            <td>@booking.Car.CarPlate</td>
                            <td>
                                <a href="/payments/view/@booking.Id" class="btn btn-primary">
                                    <span class="oi oi-dollar"></span> Payment
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
    </NotAuthorized>
</AuthorizeView>
}

@code {
    private List<Booking>? Bookings;
    private string CurrentUserName;
    private string searchTerm;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        try
        {
            Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            CurrentUserName = authenticationState.User.Identity?.Name;
        }
        catch
        {
            Dispose();
        }
    }

    async Task Delete(int bookingId)
    {
        if (Bookings != null)
        {
            var booking = Bookings.First(q => q.Id == bookingId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {booking.Id}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{bookingId}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}