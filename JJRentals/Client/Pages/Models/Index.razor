@page "/models/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car Models</h3>

<input type="text" @bind="searchTerm" placeholder="Search by name" class="form-control mb-3" />

<a href="/models/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Model
</a>
<br />
<br />

@if (Models == null)
{
    <div class="alert alert-info">Loading Models...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date Created</th>
                <th>Seat Capacity</th>
                <th>Fuel Type</th>
                <th>Transmission Type</th>
                <th>Manufacturer</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in Models.Where(m => string.IsNullOrEmpty(searchTerm) || m.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            {
                <tr>
                    <td>@model.Name</td>
                    <td>@model.DateCreated.Date.ToString("dd MMM yyyy")</td>
                    <td>@model.SeatCapacity</td>
                    <td>@model.FuelType</td>
                    <td>@model.TransmissionType</td>
                    <td>@model.Manufacturer.Name</td>

                    <td>
                        <a href="/models/view/@model.Id" class="btn btn-primary">
                            <span class="oi oi-eye"></span>
                        </a>
                        <a href="/models/edit/@model.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(model.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Model>? Models;
    private string searchTerm;

    protected async override Task OnInitializedAsync()
    {
        Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
    }

    async Task Delete(int modelId)
    {
        if (Models != null)
        {
            var model = Models.First(q => q.Id == modelId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {model.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ModelsEndpoint}/{modelId}");
                await OnInitializedAsync();
            }
        }
    }

}